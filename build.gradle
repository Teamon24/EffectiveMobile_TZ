import java.nio.file.FileSystems

import static Lazy.lazy

buildscript {
    dependencies {
        def separator = FileSystems.getDefault().getSeparator()
        classpath files(String.join(separator, "$rootDir", "src", "main"))
        classpath 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
        classpath 'commons-io:commons-io:2.15.1'
    }
}

plugins {
    id 'java'
    id 'application'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
    id 'org.liquibase.gradle' version '2.2.1'
}

//apply from: 'migrations.gradle'

group 'org.effective_mobile.task_management_system'
version '1.2'

def mainClazz = 'org.effective_mobile.task_management_system.TaskManagementSystemApp'
application { mainClassName = mainClazz }

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

def EXTENSIONS_BLOCK() {}
ext {
    paths = [
            src: slpath("$rootDir", 'src'),
            main : lazy { slpath(paths.src, 'main') },
            resources : lazy { slpath(paths.src, 'main', 'resources') },
            database : slpath("$rootDir", 'deploy', 'database'),
            migrations : [
                    it: lazy { slpath(paths.database, 'migrations') },
                    up: lazy { slpath(paths.migrations.it(), 'up') }
            ],
            logs : slpath("$rootDir", "logs")
    ]


    props = [
            default: [
                    name    : "application.properties",
                    filepath: slpath(paths.resources(), "application.properties")
            ],
            dev    : [
                    name    : "application-dev.properties",
                    filepath: slpath(paths.resources(), "application-dev.properties")
            ]
    ]

    props.default.values = getProperties(props.default.filepath)
    props.dev.values = applicationPropertiesDev(props.default.values, props.dev.filepath)

    applicationProperties = props.dev.values
}

def DEPENDENCIES_BLOCK() {}
dependencies {
    //LOMBOK --------------------------------------------------------------
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    //SPRING --------------------------------------------------------------
    configurations {
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
            exclude group: 'org.springframework.boot', module: 'logback-classic'
        }
    }
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'


    //JWT --------------------------------------------------------------
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //HIBERNATE --------------------------------------------------------------
    def hibernateVersion = '6.1.7.Final'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.7.0'
    implementation "org.hibernate:hibernate-core:$hibernateVersion"


    //4.0.0: java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlElement
    implementation 'javax.xml.bind:jaxb-api:2.3.0'

    //TESTS --------------------------------------------------------------
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testImplementation 'org.testcontainers:postgresql:1.17.3'
    testRuntimeOnly 'com.h2database:h2'
    implementation 'net.datafaker:datafaker:2.0.2'

    //MISC --------------------------------------------------------------
    implementation 'org.postgresql:postgresql:42.3.1'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.apache.commons:commons-text:1.10.0'
}

test {
    useJUnitPlatform()
}

def jarName = 'task-management-system'
def jarNameVersExt = "$jarName-${version}.jar"

def jarMap = [
        jar: [
                name    : jarName,
                fullname: jarNameVersExt,
                build   : "build/libs/$jarNameVersExt",
                deploy  : "deploy/$jarNameVersExt"]
]

def jafFileInfo = jarMap["jar"]
task copyJar(type: Copy) { from jafFileInfo.build; into 'deploy' }
task deleteJar() { project.delete(files(jafFileInfo.deploy)) }

bootJar {
    archiveFileName = jarNameVersExt
}

String slpath(String... pathParts) {
    String.join(FileSystems.getDefault().getSeparator(), pathParts)
}

String findProperty(String propertyName) {
    return findProperty(propertyName, null)
}

String findProperty(String propertyName, defaultValue) {
    return propertyName.with {
        def property = project.properties.get(it)
        if (property == null) property = System.properties.get(it)
        if (property == null) property = defaultValue
        if (property == null) throw new RuntimeException("Property '$it' is not in project, system or default properties.")
        property
    }
}

Properties applicationPropertiesDev(Properties applicationProperties, applicationPropertiesPath) {
    return new Properties().with {
        applicationProperties.forEach((k, v) -> it.put(k, v))
        getProperties(applicationPropertiesPath).forEach((k, v) -> it.put(k, v))
        it
    }
}

Properties getProperties(String propertiesFilepath) {
    return new Properties().with {
        it.load(new File(propertiesFilepath).newReader()) //название файла с данными для бд
        it
    }
}

@groovy.transform.CompileStatic
class Lazy extends Closure {
    @Delegate private Closure closure

    Lazy(Closure c) {
        super(c.getOwner(), c.getThisObject())
        this.closure = c
    }

    static Lazy of(Closure c) { new Lazy(c) }
    Object doCall() { closure.call() }
    Object doCall(Object o) { closure.call(o) }
    String toString() { closure.call() as String }
    static Lazy lazy(Closure c) { of(c) }
}