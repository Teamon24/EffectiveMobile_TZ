import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Paths
import java.text.SimpleDateFormat
import java.util.function.Function
import java.util.regex.MatchResult
import java.util.regex.Pattern

import static Lazy.lazy

buildscript {
    dependencies {
        def separator = FileSystems.getDefault().getSeparator()
        classpath files(String.join(separator, "$projectDir", "src", "main"))
        classpath 'com.fasterxml.jackson.core:jackson-databind:2.16.0'
        classpath 'commons-io:commons-io:2.15.1'

    }
}

plugins {
    id 'java'
    id 'application'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
    id 'org.liquibase.gradle' version '2.2.1'
}

group 'org.effective_mobile.task_management_system'
version '1.0-SNAPSHOT'

def mainClazz = 'org.effective_mobile.task_management_system.TaskManagementSystemApp'
application { mainClassName = mainClazz }

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

def extensions() {}
ext {
    paths = [src: slpath("$rootDir", 'src')]

    paths.resources = slpath(paths.src, 'main', 'resources')
    paths.database = slpath("$rootDir", 'deploy', 'database')

    paths.main = slpath(paths.src, 'main')
    paths.logs = slpath("$rootDir", "logs")

    paths.migrations = slpath(paths.database, 'migrations')

    props = [
            default: [
                    name    : "application.properties",
                    filepath: slpath(paths.resources, "application.properties")
            ]
    ]

    props = [
            default: [
                    name    : "application.properties",
                    filepath: slpath(paths.resources, "application.properties")
            ],
            dev    : [
                    name    : "application-dev.properties",
                    filepath: slpath(paths.resources, "application-dev.properties")
            ]
    ]

    props.default.values = getProperties(props.default.filepath)
    props.dev.values = applicationPropertiesDev(props.default.values, props.dev.filepath)

    def extension = "sql"
    liquibaseProps = [
            extension              : extension,
            changelog              : [
                    path    : paths.database,
                    filename: "changelog.$extension",
            ],

            logsFilepath           : slpath(paths.logs, 'liquibase.log'),
            outputChangeLogFilepath: slpath(paths.migrations, "output.txt"),

            migrations             : [
                    labels          : "${project.version}",
                    timeFormat      : "yyyy-MM-dd___HH-mm-ss",
                    filenameTemplate: lazy { time -> "migration-[$time].${liquibaseProps.extension}" },
                    path            : paths.migrations,
                    relativePath    : slpath('deploy', 'database', 'migrations'),
                    masterFilename  : "db.changelog-master.yaml",
                    masterFilepath  : lazy { liquibaseProps.migrations.with { slpath(it.relativePath, it.masterFilename) } }
            ],
            activities             : [
                    runnable: lazy { findProperty("enabledActivities") },
                    names   : [
                            migration: "migrationsByEntities",
                            drop     : "dropDatabase",
                            update   : "updateDatabase",
                            rollback : "rollbackDatabase"
                    ]
            ]
    ]

    liquibaseProps.migrations.with {
        it.filepath = (Function) (time) -> "${slpath(it.path, it.filenameTemplate(time))}"
    }

    liquibaseProps.changelog.with {
        it.filepath = slpath(it.path, "${it.filename}")
    }

    applicationProperties = props.dev.values
    databaseUrl = applicationProperties.with { substitute(it, it["spring.datasource.url"]) }

}

//def lazy(Closure closure) { return new Function() { Object apply(Object o) { return closure.call(o) }}}

def dependenciesBlock() {}
dependencies {
    //LOMBOK --------------------------------------------------------------
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    //SPRING --------------------------------------------------------------
    configurations {
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
            exclude group: 'org.springframework.boot', module: 'logback-classic'
        }
    }
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'


    //JWT --------------------------------------------------------------
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //HIBERNATE --------------------------------------------------------------
    def hibernateVersion = '6.1.7.Final'
    implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.7.0'
    implementation "org.hibernate:hibernate-core:$hibernateVersion"


    //4.0.0: java.lang.NoClassDefFoundError: javax/xml/bind/annotation/XmlElement
    implementation 'javax.xml.bind:jaxb-api:2.3.0'

    //TESTS --------------------------------------------------------------
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testImplementation 'org.testcontainers:postgresql:1.17.3'
    testRuntimeOnly 'com.h2database:h2'
    implementation 'net.datafaker:datafaker:2.0.2'

    //MISC --------------------------------------------------------------
    implementation 'org.postgresql:postgresql:42.3.1'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.apache.commons:commons-text:1.9'

    liquibaseRuntime 'org.liquibase:liquibase-core:4.4.0'
    //драйвер БД
    liquibaseRuntime 'org.postgresql:postgresql'
    //hibernate & spring & jpa
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate6:4.25.0'
    liquibaseRuntime 'org.springframework.data:spring-data-jdbc'
    liquibaseRuntime 'org.springframework.data:spring-data-jpa'
    liquibaseRuntime 'org.springframework.boot:spring-boot'
    liquibaseRuntime sourceSets.main.output
    //для записи в yaml
    liquibaseRuntime 'org.yaml:snakeyaml:1.26'
    liquibaseRuntime 'info.picocli:picocli:4.6.1'
}

test {
    useJUnitPlatform()
}

configurations {
    liquibaseRuntime.extendsFrom runtimeClasspath
}

def liquibaseFromEntitiesTask() {}
diff.dependsOn compileJava
diffChangelog.dependsOn compileJava
generateChangelog.dependsOn compileJava

def migrationsByEntitiesTask() {}
task migrationsByEntities {
    doFirst {
        liquibase { runList = liquibaseProps.activities.names.migration }
    }
}

diffChangelog.dependsOn migrationsByEntities
diff.dependsOn migrationsByEntities
generateChangelog.dependsOn migrationsByEntities

diffChangelog.doLast {
    liquibaseProps.with {
        def formatter = new SimpleDateFormat(it.migrations.timeFormat)
        def time = formatter.format(System.currentTimeMillis())

        def changelogFilepath = it.changelog.filepath
        def migrationFilepath = it.migrations.filepath.apply(time)

        println "Creating migrations from changelog."
        println "Changelog  : $changelogFilepath"
        println "Migrations : $migrationFilepath"

        def fromPath = Paths.get(changelogFilepath)
        def toPath = Paths.get(migrationFilepath)
        Files.copy(fromPath, toPath)
        Files.delete(fromPath)
    }
}

def migrationsByEntitiesSettingsBlock() {}
liquibase {
    activities {
        def entitiesPath = applicationProperties["liquibase.hibernate.entities.path"]
        def dialect = applicationProperties["spring.jpa.properties.hibernate.dialect"]

        "${liquibaseProps.activities.names.migration}" {
            labels liquibaseProps.migrations.labels
            changelogFile "${liquibaseProps.changelog.filepath}"
            generateChangesetCreatedValues "true"
            url databaseUrl
            username applicationProperties["spring.datasource.username"]
            password applicationProperties["spring.datasource.password"]
            referenceUrl "hibernate:spring:$entitiesPath?dialect=$dialect"
            driver applicationProperties["spring.datasource.driver-class-name"]
            logfile liquibaseProps.logsFilepath
            logLevel 'debug'
        }
    }
}


def updateDatabaseTask() {}
task updateDatabase {
    doFirst {
        liquibase { runList = liquibaseProps.activities.names.update }
    }
}
update.dependsOn updateDatabase

def updateDatabaseSettingsBlock() {}
liquibase {
    activities {
        "${liquibaseProps.activities.names.update}" {
            changelogFile "${liquibaseProps.migrations.masterFilepath()}"
            url databaseUrl
            username applicationProperties["spring.datasource.username"]
            password applicationProperties["spring.datasource.password"]
            driver applicationProperties["spring.datasource.driver-class-name"]
            logfile liquibaseProps.logsFilepath
            logLevel 'debug'
        }
    }
}

def rollbackDatabaseTask() {}
task rollbackDatabase {
    doFirst {
        liquibase {
            activities {
                main {
                    classpath "$projectDir"
                }
            }
            runList = liquibaseProps.activities.names.rollback
        }
    }
}

rollback.dependsOn rollbackSql
rollbackSql.dependsOn rollbackDatabase

def rollbackDatabaseSettingsBlock() {}
liquibase {
    activities {
        "${liquibaseProps.activities.names.rollback}" {
            changelogFile "${liquibaseProps.migrations.masterFilepath()}"
            url databaseUrl
            username applicationProperties["spring.datasource.username"]
            password applicationProperties["spring.datasource.password"]
            driver applicationProperties["spring.datasource.driver-class-name"]
            logfile liquibaseProps.logsFilepath
            logLevel 'debug'
        }
    }
}

def dropDatabaseTask() {}
task dropDatabase {
    doFirst {
        liquibase { runList = liquibaseProps.activities.names.drop }
    }
}
dropAll.dependsOn dropDatabase

def dropDatabaseSettingsBlock() {}
liquibase {
    activities {
        "${liquibaseProps.activities.names.drop}" {
            url databaseUrl
            username applicationProperties["spring.datasource.username"]
            password applicationProperties["spring.datasource.password"]
            driver applicationProperties["spring.datasource.driver-class-name"]
            logfile liquibaseProps.logsFilepath
            logLevel 'debug'
        }
    }
}



def jarName = 'task-management-system'
def jarNameVersExt = "$jarName-${version}.jar"

def jarMap = [
        jar: [
                name    : jarName,
                fullname: jarNameVersExt,
                build   : "build/libs/$jarNameVersExt",
                deploy  : "deploy/$jarNameVersExt"]
]

def jafFileInfo = jarMap["jar"]
task copyJar(type: Copy) { from jafFileInfo.build; into 'deploy' }
task deleteJar() { project.delete(files(jafFileInfo.deploy)) }

bootJar {
    archiveFileName = jarNameVersExt
}

String slpath(String... pathParts) {
    String.join(FileSystems.getDefault().getSeparator(), pathParts)
}

String substitute(Properties properties, String propertyValue) {
    String regex = '\\$\\{([A-Za-z0-9.]+)}';
    String[] keys = Pattern.compile(regex)
            .matcher(propertyValue)
            .results()
            .map(MatchResult::group)
            .map(key -> key.replaceAll('[${}]', ''))
            .toArray(String[]::new);
    Object[] values = new String[keys.length];

    for (int i = 0; i < keys.length; i++) {
        values[i] = properties.get(keys[i]);
    }

    String template = propertyValue.replaceAll(regex, "%s");
    return template.formatted(values);
}


String findProperty(String propertyName) {
    return propertyName.with {
        def property = project.properties.get(it)
        if (property == null) property = System.properties.get(it)
        if (property == null) throw new RuntimeException("There is no property '$it' in project or system properties")
        property
    }
}

Properties applicationPropertiesDev(Properties applicationProperties, applicationPropertiesPath) {
    return new Properties().with {
        applicationProperties.forEach((k, v) -> it.put(k, v))
        getProperties(applicationPropertiesPath).forEach((k, v) -> it.put(k, v))
        it
    }
}

Properties getProperties(String propertiesFilepath) {
    return new Properties().with {
        it.load(new File(propertiesFilepath).newReader()) //название файла с данными для бд
        it
    }
}

def func(Closure closure) { return new Function() { Object apply(Object o) { return closure.call(o) }}}

@groovy.transform.CompileStatic
class Lazy extends Closure {
    @Delegate private Closure closure

    Lazy(Closure c) {
        super(c.getOwner(), c.getThisObject())
        this.closure = c
    }

    static Lazy of(Closure c) { new Lazy(c) }
    Object doCall() { closure.call() }
    Object doCall(Object o) { closure.call(o) }
    String toString() { closure.call() as String }
    static Lazy lazy(Closure c) { of(c) }
}