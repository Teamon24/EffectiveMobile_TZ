plugins {
    id 'java'
    id 'application'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'org.jetbrains.kotlin.plugin.lombok' version '1.8.10'
}

group 'org.effective_mobile.task_management_system'
version '1.0-SNAPSHOT'

def mainClazz = 'org.effective_mobile.task_management_system.TaskManagementSystemApp'
application { mainClassName = mainClazz }

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}


compileKotlin {
    kotlinOptions.jvmTarget = "17"
    kotlinOptions.freeCompilerArgs = [
            //Чтобы дефолтные методы в kotlin-интерфейсах были видны из java-классов
            "-Xjvm-default=all"
    ]
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
}

repositories { mavenCentral() }

sourceSets {
    generated {
        java {
            srcDirs = ['build/generated/sources/annotationProcessor/java/main']
        }
    }
}

ext {
    paths = [ src     : slpath("$rootDir", 'src') ]

    paths.main          = slpath(paths.src,  'main')
    paths.resources     = slpath(paths.main, 'resources')
    paths.javaSrc       = slpath(paths.main, 'java')
    paths.kotlinSrc     = slpath(paths.main, 'kotlin')

    paths.test          = slpath(paths.src, 'test')
    paths.testResources = slpath(paths.test, 'resources')
    paths.testJavaSrc   = slpath(paths.test, 'java')
    paths.testKotlinSrc = slpath(paths.test, 'kotlin')
}

sourceSets {

    main.resources.srcDirs = [paths.resources]
    test.resources.srcDirs = [paths.testResources]

    //Чтобы kotlin-классы и java-классы могли использовать друг друга
    //Java-компилятор знает о java и о kotlin
    main.java.srcDirs = [paths.javaSrc, paths.kotlinSrc]
    test.java.srcDirs = [paths.testJavaSrc, paths.testKotlinSrc]

    //Kotlin-компилятор знает о java и о kotlin
    main.kotlin.srcDirs = [paths.javaSrc, paths.kotlinSrc]
    test.kotlin.srcDirs = [paths.testJavaSrc, paths.testKotlinSrc]
}

dependencies {
    def lombok_v = '1.18.30'
    def querydsl_v = '5.0.0:jakarta'
    def jakarta_v = '3.1.0'
    def junitVersion = '5.10.1'

    implementation("home:utils:1.3") {
        version {
            changing(true)
            branch = "main"
        }
        changing(true)
    }

    //kotlin -----------------------------------------------------------------
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    //LOMBOK -----------------------------------------------------------------
    compileOnly "org.projectlombok:lombok:${lombok_v}"
    annotationProcessor "org.projectlombok:lombok:${lombok_v}"
    testCompileOnly "org.projectlombok:lombok:${lombok_v}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombok_v}"

    // SPRING ----------------------------------------------------------------
    configurations {
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
            exclude group: 'org.springframework.boot', module: 'logback-classic'
        }
    }
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation 'com.lmax:disruptor:3.4.4'
    // JWT -------------------------------------------------------------------
    implementation 'com.auth0:java-jwt:4.4.0'
    // QUERYDSL --------------------------------------------------------------
    implementation "com.querydsl:querydsl-jpa:${querydsl_v}"
    annotationProcessor "com.querydsl:querydsl-apt:${querydsl_v}"

    implementation "jakarta.persistence:jakarta.persistence-api:${jakarta_v}"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:${jakarta_v}"
    // MISC -----------------------------------------------------------------
    implementation 'org.postgresql:postgresql:42.5.4'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    // DOCUMENTING----------------------------------------------------------
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.3'

    // TESTS --------------------------------------------------------------
    implementation 'net.datafaker:datafaker:2.0.2'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"

    testRuntimeOnly 'com.h2database:h2'

    testImplementation 'org.testcontainers:junit-jupiter:1.17.5'
    testImplementation 'org.testcontainers:testcontainers:1.17.5'
    testImplementation 'org.testcontainers:postgresql:1.17.5'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

def jarName = 'task-management-system'
def jarNameVersExt = "$jarName-${version}.jar"

def jarMap = [
        jar: [
                name    : jarName,
                fullname: jarNameVersExt,
                build   : "build/libs/$jarNameVersExt",
                deploy  : "deploy/$jarNameVersExt"]
]

def jafFileInfo = jarMap.get("jar")

task copyJar(type: Copy) { from jafFileInfo.build; into 'deploy' }
task deleteJar() { project.delete(files(jafFileInfo.deploy)) }

bootJar {
    archiveFileName = jarNameVersExt
}

static def slpath(String... pathParts) {
    String.join(File.separator, pathParts)
}
